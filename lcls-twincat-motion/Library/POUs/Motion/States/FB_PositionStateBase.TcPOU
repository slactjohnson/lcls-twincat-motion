<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PositionStateBase" Id="{7f5aa6dc-e692-4722-8b21-b75cf0eef6db}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PositionStateBase
(*
    Handles EPICS moves between multiple states for a single axis
    Should be subclassed for a specific enumSet and enumGet.
    See body comment  or FB_PositionStateInOut for an implementation example.
*)
VAR_IN_OUT
    // Motor to move
    stMotionStage: DUT_MotionStage;
END_VAR
VAR_INPUT
    // If TRUE, start a move when setState transitions to a nonzero number
    bEnable: BOOL;
    // On rising edge, reset this FB
    {attribute 'pytmc' := '
        pv: RESET
        io: io
        field: ZNAM False
        field: ONAM True
    '}
    bReset: BOOL;
END_VAR
VAR_OUTPUT
    // If TRUE, there is an error
    {attribute 'pytmc' := '
        pv: ERR
        io: i
        field: ZNAM False
        field: ONAM True
    '}
    bError: BOOL;
    // Error ID
    {attribute 'pytmc' := '
        pv: ERRID
        io: i
    '}
    nErrorId: UDINT;
    // The error that caused bError to flip TRUE
    {attribute 'pytmc' := '
        pv: ERRMSG
        io: i
    '}
    sErrorMessage: STRING;
    // If TRUE, we are moving the motor
    {attribute 'pytmc' := '
        pv: BUSY
        io: i
        field: ZNAM False
        field: ONAM True
    '}
    bBusy: BOOL;
    // If TRUE, we are not moving the motor and the last move completed successfully
    {attribute 'pytmc' := '
        pv: DONE
        io: i
        field: ZNAM False
        field: ONAM True
    '}
    bDone: BOOL;
END_VAR
VAR
    // Pre-allocated array of states
    {attribute 'pytmc' := '
        pv:
        io: io
        expand: %.2d
    '}
    arrStates: ARRAY[1..MOTION_GVL.MAX_STATES] OF DUT_PositionState;

    // Corresponding arrStates index to move to, or 0 if no move selected
    setState: INT;
    // The current position we are trying to reach, or 0
    goalState: INT;
    // The readback position
    getState: INT;

    bInit: BOOL;
    stUnknown: DUT_PositionState;
    stGoal: DUT_PositionState;
    fbStateMove: FB_PositionStateMove;
    fbStateInternal: ARRAY[1..MOTION_GVL.MAX_STATES] OF FB_PositionStateInternal;
    nIndex: INT;
    bNewGoal: BOOL;
    bInnerExec: BOOL;
    bInnerReset: BOOL;
    rtReset: R_TRIG;
    bMoveRequested: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(*
    Subclass me, define enums to translate setState and getState, call Exec

    Example:

    <something to fill arrStates>
    setState := enumSet;
    Exec();
    enumGet := getState;
    enumSet := setState;
*)]]></ST>
    </Implementation>
    <Action Name="Exec" Id="{8b37ff0c-46c4-4cbd-b482-f5a9774a00d1}">
      <Implementation>
        <ST><![CDATA[StateHandler();]]></ST>
      </Implementation>
    </Action>
    <Action Name="StateHandler" Id="{95b18b26-9233-4efa-bc21-bcb749c7c80f}">
      <Implementation>
        <ST><![CDATA[// Reset just goes through the first-cycle init again
rtReset(CLK:=bReset);
IF rtReset.Q THEN
    bInit := FALSE;
    bReset := FALSE;
END_IF

// First-cycle init
IF NOT bInit THEN
    bError := FALSE;
    nErrorID := 0;
    sErrorMessage := '';
    bBusy := FALSE;
    bDone := FALSE;
    bNewGoal := FALSE;
    bInnerExec := FALSE;
    bInnerReset := TRUE;
    setState := 0;
    goalState := 0;
END_IF

// All state internal handlers
FOR nIndex := 1 TO MOTION_GVL.MAX_STATES DO
    IF arrStates[nIndex].bValid THEN
        fbStateInternal[nIndex](
            stMotionStage:=stMotionStage,
            stPositionState:=arrStates[nIndex]);
    END_IF
END_FOR

// Check where we are by going through all possible states.
// Note this favors the highest-number state that we're at, it's up to you to make your states mutually exclusive.
getState := 0;
FOR nIndex := 1 TO MOTION_GVL.MAX_STATES DO
    IF F_AtPositionState(stMotionStage:=stMotionStage, stPositionState:=arrStates[nIndex]) THEN
        getState := nIndex;
    END_IF
END_FOR

// Use the changing set pv as a rising-edge trigger
IF setState <> goalState THEN
    goalState := setState;
    bNewGoal := TRUE;
END_IF

// Special move handling for error/enable state
IF bError OR NOT bEnable THEN
    bInnerExec := FALSE;
// Reset inner block this cycle if we were already moving but want a new move
ELSIF bInnerExec AND bNewGoal THEN
    bInnerExec := FALSE;
    bInnerReset := TRUE;
// If we hit this branch, we're starting a new move
ELSIF bNewGoal THEN
    bInnerExec := TRUE;
    bInnerReset := FALSE;
    bNewGoal := FALSE;
END_IF

// Pick the correct goal structure or Unknown
IF goalState = 0 THEN
    stGoal := stUnknown;
ELSE
    stGoal := arrStates[goalState];
END_IF

// Do the move
fbStateMove(
    stMotionStage := stMotionStage,
    stPositionState := stGoal,
    bExecute := bInnerExec,
    bReset := bInnerReset,
    enumMotionRequest := ENUM_MotionRequest.INTERRUPT,
    bBusy => bBusy);

// Only pass up bDone information if this FB is active
IF bInnerExec THEN
    bDone := fbStateMove.bDone;
END_IF

// Pick up any new errors, but don't override uncleared existing errors
IF NOT bError THEN
    bError := fbStateMove.bError;
    IF bError THEN
        nErrorId := fbStateMove.nErrorId;
        sErrorMessage := fbStateMove.sErrorMessage;
    END_IF
END_IF

// Reset the setpoint and goal to 0 if we're not doing anything
// because FB is waiting for a change from 0 to "something"
bMoveRequested := bInnerExec AND NOT bDone;
IF NOT bError AND NOT bNewGoal AND NOT bMoveRequested THEN
    setState := 0;
    goalState := 0;
    bInnerExec := FALSE;
END_IF

// Bring inner reset back low at the end of the init cycle so that it can be triggered again later
IF NOT bInit THEN
    bInit := TRUE;
    bInnerReset := FALSE;
END_IF]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>