<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_MotionStage" Id="{137c52b5-8983-4728-b719-31601503f20a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MotionStage
(*
    Default implementation for PLC behavior when motor IOC asks for a move
    This can be extended or replaced in your PLC project if you want
    non-default behavior to arise from the motor record processing
*)
VAR_IN_OUT
    stMotionStage: DUT_MotionStage;
END_VAR
VAR
    fbDriveVirtual: FB_DriveVirtual;
    fbMotionHome: FB_MotionHoming;
    fbSaveRestore: FB_EncSaveRestore;
    bExecute: BOOL;
    bExecMove: BOOL;
    bExecHome: BOOL;
    bFwdHit: BOOL;
    bBwdHit: BOOL;
    ftExec: F_TRIG;
    rtExec: R_TRIG;
    rtUserExec: R_TRIG;
    rtTarget: R_TRIG;
    rtHomed: R_TRIG;
    fbSetEnables: FB_SetEnables;
    bPosGoal: BOOL;
    bNegGoal: BOOL;
    fbEncoderValue: FB_EncoderValue;
    fbNCParams: FB_MotionStageNCParams;
    bNewMoveReq: BOOL;
    bPrepareDisable: BOOL;
    bMoveCmd: BOOL;
    rtMoveCmdShortcut: R_TRIG;
    rtHomeCmdShortcut: R_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Start with an accurate status
stMotionStage.Axis.ReadStatus();

// Check for the plc shortcut commands
// Used for testing or to circumvent motor record issues
rtMoveCmdShortcut(CLK:=stMotionStage.bMoveCmd);
rtHomeCmdShortcut(CLK:=stMotionStage.bHomeCmd);
IF rtMoveCmdShortcut.Q AND NOT stMotionStage.bExecute THEN
    stMotionStage.bMoveCmd := FALSE;
    stMotionStage.bHomeCmd := FALSE;
    stMotionStage.bExecute := TRUE;
    stMotionStage.nCommand := ENUM_EpicsMotorCmd.MOVE_ABSOLUTE;
ELSIF rtHomeCmdShortcut.Q AND NOT stMotionStage.bExecute THEN
    stMotionStage.bMoveCmd := FALSE;
    stMotionStage.bHomeCmd := FALSE;
    stMotionStage.bExecute := TRUE;
    stMotionStage.nCommand := ENUM_EpicsMotorCmd.HOME;
END_IF

// Automatically fill the correct nCmdData for homing
IF stMotionStage.nCommand = ENUM_EpicsMotorCmd.HOME THEN
    stMotionStage.nCmdData := stMotionStage.nHomingMode;
END_IF

// Check if the command wants to cause a move
bMoveCmd R= stMotionStage.nCmdData = ENUM_EpicsHomeCmd.ABSOLUTE_SET;
bMoveCmd R= stMotionStage.nCmdData = ENUM_EpicsHomeCmd.NONE;
bMoveCmd S= stMotionStage.nCommand <> ENUM_EpicsMotorCmd.HOME;

// Handle main execs
rtUserExec(CLK := stMotionStage.bExecute);
bNewMoveReq S= rtUserExec.Q AND bMoveCmd;
bNewMoveReq R= NOT stMotionStage.bExecute;
bPrepareDisable R= bNewMoveReq;

bPosGoal := stMotionStage.stAxisStatus.fActPosition < stMotionStage.fPosition;
bNegGoal := stMotionStage.stAxisStatus.fActPosition > stMotionStage.fPosition;

// Moves are automatically allowed if no safety hooks. Otherwise, some other code will set this.
stMotionStage.bSafetyReady S= stMotionStage.bPowerSelf;

// Handle auto-enable timing
CASE stMotionStage.nEnableMode OF
    ENUM_StageEnableMode.ALWAYS:
        stMotionStage.bEnable := TRUE;
    ENUM_StageEnableMode.DURING_MOTION:
        IF bNewMoveReq THEN
            IF stMotionStage.nCommand = ENUM_EpicsMotorCmd.HOME THEN
                stMotionStage.bEnable := stMotionStage.bSafetyReady;
            ELSIF bPosGoal THEN
                IF stMotionStage.bAllForwardEnable THEN
                    stMotionStage.bEnable := stMotionStage.bSafetyReady;
                ELSIF NOT stMotionStage.bError THEN
                    // Not an error, just a warning
                    stMotionStage.sErrorMessage := 'Cannot move past positive limit.';
                    stMotionStage.bExecute := FALSE;
                END_IF
            ELSIF bNegGoal THEN
                IF stMotionStage.bAllBackwardEnable THEN
                    stMotionStage.bEnable := stMotionStage.bSafetyReady;
                ELSIF NOT stMotionStage.bError THEN
                    // Not an error, just a warning
                    stMotionStage.sErrorMessage := 'Cannot move past negative limit.';
                    stMotionStage.bExecute := FALSE;
                END_IF
            END_IF
            IF stMotionStage.bEnable OR stMotionStage.bError THEN
                bNewMoveReq := FALSE;
            END_IF
        END_IF
END_CASE

// Do not start the move until we have power and the safety system says it is OK
IF bMoveCmd THEN
    bExecute := stMotionStage.bExecute AND stMotionStage.bEnableDone AND stMotionStage.bSafetyReady;
ELSE
    bExecute := stMotionStage.bExecute;
END_IF

IF bExecute AND NOT stMotionStage.bError THEN
    // Reset local warnings if things are going well
    stMotionStage.sErrorMessage := '';
END_IF



// Update all enable booleans
fbSetEnables(stMotionStage:=stMotionStage);

// No moves allowed in error states
IF stMotionStage.bError THEN
    bExecute := FALSE;
END_IF


bExecHome := bExecute AND stMotionStage.nCommand = 10;
bExecMove := bExecute AND NOT bExecHome;

// Handle standard commands using ESS's FB
fbDriveVirtual(En:=TRUE,
    bEnable:=stMotionStage.bAllEnable,
    bReset:=stMotionStage.bReset,
    bExecute:=bExecMove,
    nCommand:=INT_TO_UINT(stMotionStage.nCommand),
    nCmdData:=INT_TO_UINT(stMotionStage.nCmdData),
    fVelocity:=stMotionStage.fVelocity,
    fPosition:=stMotionStage.fPosition,
    fAcceleration:=stMotionStage.fAcceleration,
    fDeceleration:=stMotionStage.fDeceleration,
    bLimitFwd:=stMotionStage.bAllForwardEnable,
    bLimitBwd:=stMotionStage.bAllBackwardEnable,
    bHomeSensor:=stMotionStage.bHome,
    fHomePosition:=stMotionStage.fHomePosition,
    bPowerSelf:=stMotionStage.bPowerSelf,
    nMotionAxisID=>stMotionStage.nMotionAxisID,
    Axis:=stMotionStage.Axis);

// Some custom home handling
fbMotionHome(
    stMotionStage:=stMotionStage,
    bExecute:=bExecHome);

// Update status again after the move starts or stops
stMotionStage.Axis.ReadStatus();

// Check for a new error
IF NOT stMotionStage.bError THEN
    stMotionStage.bError := fbDriveVirtual.bError;
    stMotionStage.nErrorId := fbDriveVirtual.nErrorId;
END_IF
IF NOT stMotionStage.bError THEN
    stMotionStage.bError := fbMotionHome.bError;
    stMotionStage.nErrorId := fbMotionHome.nErrorId;
END_IF

// Set the error message if we have one
IF stMotionStage.bError THEN
    // Hook if other code wants to inject a non-NC error
    IF stMotionStage.sCustomErrorMessage <> '' THEN
        stMotionStage.sErrorMessage := stMotionSTage.sCustomErrorMessage;
    ELSE
        stMotionStage.sErrorMessage := F_MotionErrorCodeLookup(nErrorId := stMotionStage.nErrorId);
    END_IF
END_IF

// When we start, set the busy/done appropriately
rtExec(CLK:=bExecute);
IF rtExec.Q THEN
    stMotionStage.bBusy := TRUE;
    stMotionStage.bDone := FALSE;
END_IF

// Force everything off in case of error
IF stMotionStage.bError THEN
    stMotionStage.bBusy := FALSE;
    stMotionStage.bDone := FALSE;
    stMotionStage.bEnable := FALSE;
END_IF

// Check the limits and cancel execution if appropriate. Without this block we have infinite error spam
bFwdHit := stMotionStage.Axis.Status.PositiveDirection AND NOT stMotionStage.bAllForwardEnable;
bBwdHit := stMotionStage.Axis.Status.NegativeDirection AND NOT stMotionStage.bAllBackwardEnable;
IF (bFwdHit OR bBwdHit) AND NOT fbMotionHome.bBusy THEN
    stMotionStage.bExecute := FALSE;
END_IF

// Check done moving via user stop, fbDriveVirtual and Target Position Monitoring, or from homing.
ftExec(CLK:=stMotionStage.bExecute);
rtTarget(CLK:=(stMotionStage.Axis.Status.InTargetPosition AND fbDriveVirtual.bDone AND bExecMove));
rtHomed(CLK:=fbMotionHome.bDone AND bExecHome);
IF ftExec.Q OR rtTarget.Q OR rtHomed.Q THEN
    IF NOT stMotionStage.bDone THEN
        stMotionStage.bDone := TRUE;
        stMotionStage.bBusy := FALSE;
        IF NOT stMotionStage.Axis.Status.Error THEN
            bExecute := FALSE;
            stMotionStage.bExecute := FALSE;
        END_IF
    END_IF
END_IF

// Handle auto-disable timing
bPrepareDisable S= stMotionStage.nEnableMode = ENUM_StageEnableMode.DURING_MOTION AND ftExec.Q;
// Delay the disable until we reach standstill, else brake issues or other race conditions
IF bPrepareDisable AND stMotionStage.Axis.Status.MotionState = MC_AXISSTATE_STANDSTILL THEN
    bPrepareDisable := FALSE;
    stMotionStage.bEnable := FALSE;
END_IF

// Get a definitive bEnabled reading
CASE stMotionStage.Axis.Status.MotionState OF
    // We are not enabled if there is an issue
    MC_AXISSTATE_UNDEFINED, MC_AXISSTATE_DISABLED, MC_AXISSTATE_ERRORSTOP:
        stMotionStage.bEnableDone := FALSE;
    ELSE
        stMotionStage.bEnableDone := TRUE;
END_CASE

// Handle the brake. TRUE means brake disabled/released
IF stMotionStage.nBrakeMode <> ENUM_StageBrakeMode.NO_BRAKE THEN
    CASE stMotionStage.Axis.Status.MotionState OF
        MC_AXISSTATE_UNDEFINED,
        MC_AXISSTATE_DISABLED,
        MC_AXISSTATE_ERRORSTOP:
            stMotionStage.bBrakeRelease := FALSE;
        MC_AXISSTATE_STANDSTILL:
            IF stMotionStage.nBrakeMode = ENUM_StageBrakeMode.IF_MOVING THEN
                stMotionStage.bBrakeRelease := FALSE;
            ELSE
                stMotionStage.bBrakeRelease := TRUE;
            END_IF
        ELSE
            stMotionStage.bBrakeRelease := TRUE;
    END_CASE
END_IF

// Sync the epics status struct
stMotionStage.stAxisStatus := fbDriveVirtual.stAxisStatus;
stMotionStage.stAxisStatus.bEnabled := stMotionStage.bEnableDone;

// Override homing status, dmov as appropriate
stMotionStage.bHomed := fbMotionHome.bDone AND NOT fbMotionHome.bError;
stMotionStage.stAxisStatus.bHomed := stMotionStage.bHomed;
stMotionStage.stAxisStatus.bExecute := bExecute;
stMotionStage.stAxisStatus.nCommand := 3; // If this is not 3, the IOC stops updating positions during homing

// Reset everything when bReset is flagged
IF stMotionStage.bReset THEN
    stMotionStage.bEnable := FALSE;
    stMotionStage.bReset := FALSE;
    stMotionStage.bExecute := FALSE;
    stMotionStage.bError := FALSE;
    stMotionStage.nErrorId := 0;
    stMotionStage.sErrorMessage := '';
    stMotionStage.sCustomErrorMessage := '';
    bExecute := FALSE;
END_IF

fbEncoderValue(stMotionStage:=stMotionStage);
fbNCParams(
    stMotionStage:=stMotionStage,
    bEnable:=TRUE,
    tRefreshDelay:=T#1s);

// Save and restore as long as not an absolute encoder
fbSaveRestore(
    stMotionStage:=stMotionStage,
    bEnable:=stMotionStage.nHomingMode <> ENUM_EpicsHomeCmd.NONE);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>