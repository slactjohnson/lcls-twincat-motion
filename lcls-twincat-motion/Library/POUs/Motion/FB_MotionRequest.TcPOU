<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_MotionRequest" Id="{f3ce72e2-b968-4260-9a64-8e0267e89e51}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MotionRequest
(*
    Request a move from an axis controlled via EPICS using FB_MotionStage
    This exists to manage situations where different bits of code may need to move the same motor.
    With just the DUT_MotionStage/FB_MotionStage setup it is possible for two function blocks to
    fight with and interfere with each other and with the EPICS commands.
*)
VAR_IN_OUT
    // Motor to move
    stMotionStage: DUT_MotionStage;
END_VAR
VAR_INPUT
    // Start move on rising edge, stop move on falling edge
    bExecute: BOOL;
    // Reset errors on rising edge
    bReset: BOOL;
    // Define behavior for when the motor is already moving
    enumMotionRequest: ENUM_MotionRequest := ENUM_MotionRequest.WAIT;
    // Goal position
    fPos: LREAL;
    // Move velocity
    fVel: LREAL;
    // Optional acceleration
    fAcc: LREAL;
    // Optional deceleration
    fDec: LREAL;
END_VAR
VAR_OUTPUT
    // True if in error state
    bError: BOOL;
    // Error code
    nErrorId: UDINT;
    // What the error code means
    sErrorMessage: STRING;
    // If TRUE, we are moving the motor
    bBusy: BOOL;
    // If TRUE, we are not moving the motor and our most recent move was successful
    bDone: BOOL;
END_VAR
VAR
    rtExec: R_TRIG;
    ftExec: F_TRIG;
    rtReset: R_TRIG;
    ftBusy: F_TRIG;
    nState: UINT := 0;
    bMyMove: BOOL;
    bCausedError: BOOL;
END_VAR
// Define local constants for our state machine states
VAR CONSTANT
    INIT: UINT := 0;
    WAIT_EXEC: UINT := 1;
    PICK_REQUEST: UINT := 2;
    WAIT_OTHER_MOVE: UINT := 3;
    STOP_OTHER_MOVE: UINT := 4;
    START_MOVE: UINT := 5;
    WAIT_MY_MOVE: UINT := 6;
    STOP_MY_MOVE: UINT := 7;
    DONE_MOVING: UINT := 8;
    ERROR: UINT := 9;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[rtExec(CLK:=bExecute);
ftExec(CLK:=bExecute);
rtReset(CLK:=bReset);

// Go back to INIT state on reset
IF rtReset.Q THEN
    nState := INIT;
    stMotionStage.bReset := TRUE;
END_IF
IF rtExec.Q OR ftExec.Q THEN
    bDone := FALSE;
END_IF

CASE nState OF
    // Start by setting everything to a known value
    INIT:
        nState := WAIT_EXEC;
        bError := FALSE;
        sErrorMessage := '';
        bDone := FALSE;
        bCausedError := FALSE;
    // Normal "waiting for move command" state
    WAIT_EXEC:
        bMyMove := FALSE;
        // Looking for a rising edge on bExecute
        IF rtExec.Q THEN
            bDone := FALSE;
            nState := PICK_REQUEST;
        END_IF
    // Decide how to handle the request
    PICK_REQUEST:
        IF stMotionStage.bBusy THEN
            CASE enumMotionRequest OF
                ENUM_MotionRequest.WAIT:
                    nState := WAIT_OTHER_MOVE;
                ENUM_MotionRequest.INTERRUPT:
                    nState := STOP_OTHER_MOVE;
                ENUM_MotionRequest.ABORT:
                    nState := ERROR;
                    bError := TRUE;
                    nErrorId := 16#7900;
            END_CASE
        ELSE
            nState := START_MOVE;
        END_IF
    // Watch the other move, then see if it's our turn
    WAIT_OTHER_MOVE:
        IF NOT stMotionStage.bBusy THEN
            // Try to pick request again next cycle once the move is over
            nState := PICK_REQUEST;
        END_IF
    // Interrupt the other move, then go to start ours
    STOP_OTHER_MOVE:
        stMotionStage.bExecute := FALSE;
        IF NOT stMotionStage.bBusy THEN
            nState := START_MOVE;
        END_IF
    // Set the correct values on DUT_MotionStage to start a new absolute move
    START_MOVE:
        bMyMove := TRUE;
        stMotionStage.bExecute := TRUE;
        stMotionStage.nCommand := ENUM_EpicsMotorCmd.MOVE_ABSOLUTE;
        stMotionStage.fPosition := fPos;
        stMotionStage.fVelocity := fVel;
        stMotionStage.fAcceleration := fAcc;
        stMotionStage.fDeceleration := fDec;
        nState := WAIT_MY_MOVE;
    // Watch our ongoing move, look for the move to end or requests to stop the move from this FB
    WAIT_MY_MOVE:
        ftBusy(CLK:=stMotionStage.bBusy);
        IF ftBusy.Q THEN
            nState := DONE_MOVING;
        END_IF
        // Implement stop on falling trigger
        IF ftExec.Q THEN
            nState := STOP_MY_MOVE;
        END_IF
    // Request a stop and wait for it to happen
    STOP_MY_MOVE:
        stMotionStage.bExecute := FALSE;
        IF NOT stMotionStage.bBusy THEN
            nState := DONE_MOVING;
        END_IF
    // Pick out the bDone state and return to waiting
    DONE_MOVING:
        bDone := stMotionStage.bDone;
        nState := WAIT_EXEC;
    // Lock us into the error state until the FB is reset
    ERROR:
        bMyMove := FALSE;
END_CASE

// Transition to the ERROR state if applicable
IF bMyMove AND stMotionStage.bError THEN
    nState := ERROR;
    bError := TRUE;
    nErrorId := stMotionStage.nErrorId;
    bCausedError := TRUE;
END_IF
sErrorMessage := F_MotionErrorCodeLookup(nErrorId := nErrorId);

CASE nState OF
INIT, WAIT_EXEC, ERROR:
    bBusy := FALSE;
ELSE
    bBusy := TRUE;
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>