<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_PositionStatePMPS_Base" Id="{e35067d1-2ee7-46f4-a240-48505f8439a4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PositionStatePMPS_Base
(*
    FB_PositionStatePMPS without Arbiter, BPTM, FFO

    This allows me to test most of the code without an arbiter plc setup
*)
VAR_IN_OUT
    stMotionStage: DUT_MotionStage;
    arrStates: ARRAY[1..MOTION_GVL.MAX_STATES] OF DUT_PositionState;
END_VAR
VAR_INPUT
    bArbiterEnabled: BOOL := TRUE;
    {attribute 'pytmc' := '
        pv: MAINT
        io: io
    '}
    bMaintMode: BOOL;
    bRequestTransition: BOOL;
    setState: INT;
    getState: INT;
    fStateBoundaryDeadband: LREAL := 0;
    stTransitionBeam: ST_BeamParams := PMPS_GVL.cst0RateBeam;
    nTransitionAssertionID: UDINT;
    nUnknownAssertionID: UDINT;
    tArbiterTimeout: TIME := T#1s;
    bMoveOnArbiterTimeout: BOOL := TRUE;
    stInvalidState: DUT_PositionState := MOTION_GVL.stInvalidState;
    stUnknownState: DUT_PositionState := MOTION_GVL.stUnknownState;
END_VAR
VAR_OUTPUT
    bTransitionAuthorized: BOOL;
    bForwardAuthorized: BOOL;
    bBackwardAuthorized: BOOL;
    bArbiterTimeout: BOOL;
END_VAR
VAR
    bInit: BOOL := TRUE;
    bTransDone: BOOL;
    rtTransReq: R_TRIG;
    bBPTMDone: BOOL;
    rtBPTMDone: R_TRIG;
    ftMotorExec: F_TRIG;
    stStateReq: DUT_PositionState;
    mcPower: MC_POWER;
    fUpperBound: LREAL;
    fLowerBound: LREAL;
    nGoalState: INT;
    stGoalState: DUT_PositionState;
    fActPos: LREAL;
    fReqPos: LREAL;
    bInTransition: BOOL;
    stBeamNeeded: ST_BeamParams;
    bFwdOk: BOOL;
    bBwdOk: BOOL;
    tonArbiter: TON;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// This is meant to be subclassed. The parent class body is in the Exec action.]]></ST>
    </Implementation>
    <Action Name="AssertHere" Id="{dd496f32-140c-045e-305d-b321a567dbda}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
    <Action Name="ClearAsserts" Id="{19346cf1-a7c9-4f9d-b503-b5f20c2934f9}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
    <Action Name="Exec" Id="{5b04393f-c32f-49f1-a610-cb4c89f50675}">
      <Implementation>
        <ST><![CDATA[// Initialize or reinitialize to the current state value
rtBPTMDone(CLK:=bBPTMDone);
ftMotorExec(CLK:=stMotionStage.bExecute);
IF rtBPTMDone.Q OR ftMotorExec.Q THEN
    bInit := TRUE;
END_IF
IF bInit OR nGoalState = 0 OR stMotionStage.bError THEN
    bInit R= stMotionStage.bAxisParamsInit;
    nGoalState := getState;
    stStateReq := GetStateStruct(getState);
    bInTransition := FALSE;
    stInvalidState.nRequestAssertionID := nUnknownAssertionID;
    stUnknownState.nRequestAssertionID := nUnknownAssertionID;
END_IF

// Request transition on rising edge
rtTransReq(CLK:=bRequestTransition);
IF rtTransReq.Q THEN
    nGoalState := setState;
    stStateReq := GetStateStruct(setState);
    bInTransition := TRUE;
    bTransDone := FALSE;
ELSE
    bTransDone := F_AtPositionState(stMotionStage:=stMotionStage, stPositionState:=stStateReq) AND NOT stMotionStage.bBusy;
END_IF

IF bArbiterEnabled THEN
    // Handles getting the request to the arbiter and back
    HandleBPTM();
    // Handle arbiter timeouts
    IF tArbiterTimeout > T#0s THEN
        tonArbiter(
            IN:=bInTransition AND NOT bTransitionAuthorized,
            PT:=tArbiterTimeout,
            Q=>bArbiterTimeout);
    ELSE
        bArbiterTimeout := FALSE;
    END_IF
    bTransitionAuthorized S= bArbiterTimeout AND bMoveOnArbiterTimeout;
ELSE
    // Clear all of our assertions if we decide to disable the arbiter
    ClearAsserts();
    // Do some dummy request handling
    bTransitionAuthorized := stMotionStage.bExecute;
    bArbiterTimeout := stMotionStage.bExecute;
END_IF

// Set up MPS virtual limit for moves at and between states
stGoalState := GetStateStruct(nGoalState);
fActPos := stMotionStage.stAxisStatus.fActPosition;
IF stMotionStage.bExecute THEN
    fReqPos := stMotionStage.fPosition;
ELSE
    fReqPos := fActPos;
END_IF

// Start with no move authority
bForwardAuthorized := FALSE;
bBackwardAuthorized := FALSE;

// Check if it would be OK to move without granting auth
bFwdOk := F_PosUnderUpperBound(MAX(fActPos, fReqPos) + ABS(fStateBoundaryDeadband), stGoalState);
bBwdOk := F_PosOverLowerBound(MIN(fActPos, fReqPos) - ABS(fStateBoundaryDeadband), stGoalState);

// Grant auth during moves based on goal state, current position, and goal position
IF stMotionStage.bExecute AND stGoalState.bValid THEN
    bForwardAuthorized := bFwdOk;
    bBackwardAuthorized := bBwdOk;
END_IF

IF bInTransition THEN
    // Deny auth during a transition request until transition is authorized
    bForwardAuthorized R= NOT bTransitionAuthorized;
    bBackwardAuthorized R= NOT bTransitionAuthorized;
    // Have the motor wait for permission to start move instead of immediately erroring
    stMotionStage.bSafetyReady := bTransitionAuthorized;
ELSE
    // If not transitioning, no need to wait for safety: immediately try to move and error if no auth
    stMotionStage.bSafetyReady := stMotionStage.bExecute;
    // Set an error message override in case this causes an error
    IF stMotionStage.bError AND bArbiterEnabled AND NOT bMaintMode THEN
        IF fReqPos > fActPos AND NOT bFwdOk THEN
            stMotionStage.sCustomErrorMessage := 'Unsafe tweak forward blocked by PMPS';
        ELSIF fReqPos < fActPos AND NOT bBwdOk THEN
            stMotionStage.sCustomErrorMessage := 'Unsafe tweak backward blocked by PMPS';
        END_IF
    END_IF
END_IF

IF bArbiterEnabled AND NOT bMaintMode THEN
// Only let us move if the transition is allowed, or if we are moving within a state's bounds
    mcPower(Axis:=stMotionStage.Axis,
            Enable:=stMotionStage.bAllEnable,
            Enable_Positive:=stMotionStage.bAllForwardEnable AND bForwardAuthorized,
            Enable_Negative:=stMotionStage.bAllBackwardEnable AND bBackwardAuthorized);
ELSE
    mcPower(Axis:=stMotionStage.Axis,
            Enable:=stMotionStage.bAllEnable,
            Enable_Positive:=stMotionStage.bAllForwardEnable,
            Enable_Negative:=stMotionStage.bAllBackwardEnable);
    stMotionStage.bSafetyReady := TRUE;
END_IF

// Raise fast faults as needed
stBeamNeeded := GetBeamFromState(getState);
HandleFFO();]]></ST>
      </Implementation>
    </Action>
    <Method Name="GetBeamFromState" Id="{ace20d49-ae59-4162-85f5-ab83a2a0552b}">
      <Declaration><![CDATA[METHOD GetBeamFromState : ST_BeamParams;
VAR_INPUT
    nState: INT;
END_VAR
VAR
    stState: DUT_PositionState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stState := GetStateStruct(nState);
GetBeamFromState := stState.stBeamParams;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStateCode" Id="{30e413cd-5f48-49b3-b46d-6cd3e4359ded}">
      <Declaration><![CDATA[METHOD GetStateCode : INT
VAR_INPUT
    nState: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nState < 0 OR nState > MOTION_GVL.MAX_STATES THEN
    GetStateCode := -1;
ELSE
    GetStateCode := nState;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetStateStruct" Id="{fd5be017-4792-4f22-a98a-6c401c8e2c66}">
      <Declaration><![CDATA[METHOD GetStateStruct : DUT_PositionState
VAR_INPUT
    nState: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[{warning disable C0371}
// Implicit VAR_IN_OUT reference inside a method needs special handling
IF NOT __ISVALIDREF(arrStates) THEN
    GetStateStruct := stInvalidState;
    RETURN;
END_IF
CASE GetStateCode(nState) OF
    -1: GetStateStruct := stInvalidState;
    0: GetStateStruct := stUnknownState;
    ELSE
        GetStateStruct := arrStates[nState];
END_CASE
{warning restore C0371}]]></ST>
      </Implementation>
    </Method>
    <Action Name="HandleBPTM" Id="{b4dce640-f1d3-4191-98dd-b7fe08e15f67}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
    <Action Name="HandleFFO" Id="{4a6d3817-8b4c-48a0-a34b-e22189bbf6e2}">
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>